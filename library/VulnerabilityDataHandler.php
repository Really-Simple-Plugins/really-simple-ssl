<?php

namespace library;

use Exception;

class VulnerabilityDataHandler {
	private $vulnerabilities;
	private $slug;
	private $version;

	/**
	 * @throws Exception
	 */
	public function __construct( array $vulnerabilities, string $slug, string $version = '') {
		$this->vulnerabilities = $vulnerabilities;
		$this->slug            = $slug;
		$this->version         = $version;

		//if the version is not set we throw an exception
		if ( empty( $this->version ) ) {
			throw new Exception( 'Version is not set' );
		}
	}

	/**
	 * Validates all relevant vulnerabilities for a component and only returns the ones that are not relevant
	 *
	 * @param array $vulnerabilities
	 * @param string $slug
	 * @param string $version
	 *
	 * @return array
	 * @throws Exception
	 */
	public static function validateComponent( array $vulnerabilities, string $slug, string $version = '' )
	{
		$handler = new self( $vulnerabilities, $slug, $version );
		return $handler->validate();
	}

	public function validate(): array {
		//we validate if the version of the current component is vulnerable
		foreach ( $this->vulnerabilities as $index => $vulnerability ) {
			//if the version is vulnerable we throw an exception
			if ( $this->version === $vulnerability->max_version ) {
				//we unset the current vulnerability from the array
				unset( $this->vulnerabilities[ $index ] );
			}
		}
		//we return what is left of the array
		return $this->vulnerabilities;
	}

}