import {create} from "zustand";
import * as rsssl_api from "../../utils/api";
import {produce} from "immer";
import {__} from "@wordpress/i18n";
import React from "react";

const useVulnerabilityData = create((set, get) => ({
    // Stuff we need for the WPVulData component
    updates: 0, //for letting the component know if there are updates available
    vulnerabilities: 0, //for storing the data
    HighestRisk: false, //for storing the highest risk
    dataLoaded: false, //for letting the component know if the data is loaded
    lastChecked: 'never', //for storing the last time the data was checked
    vulEnabled: false, //for storing the status of the vulnerability scan
    riskNaming: {}, //for storing the risk naming
    introCompleted: false, //for storing the status of the first run
    vulList: [], //for storing the list of vulnerabilities
    setIntroCompleted: (value) => {
        set({introCompleted: value});
    },
    /*
    * Getters
     */
    getVulnerabilities: () => {
        return get().vulnerabilities;
    },

    capitalizeFirstLetter: (str) => {
        return str.charAt(0).toUpperCase() + str.slice(1);
    },

    /*
    * Functions
     */
    fetchVulnerabilities: async () => {
        let data = {};
        try {
            const fetched = await rsssl_api.doAction('vulnerabilities_stats', data);
            console.log("fetched data: ");
            console.log(fetched);
            let vulList = fetched.data.vulList;
            if (typeof vulList === 'object') {
                //we make it an array
                vulList = Object.values(vulList);
            }
            vulList.forEach(function (item, i) {
                item.vulnerability_action = <div className="rsssl-vulnerability-action">
                    <a className="button" href={"https://really-simple-ssl.com/vulnerabilities/" + item.rss_identifier}
                       target={"_blank"}>{__("Details", "really-simple-ssl")}</a>
                    <a target={"_blank"} href={rsssl_settings.plugins_url + "?plugin_status=upgrade"}
                       className="button button-primary"
                       >{__("View", "really-simple-ssl")}</a>
                </div>
            });
            set(
                produce((state) => {
                    state.vulnerabilities = fetched.data.vulnerabilities;
                        state.updates = fetched.data.updates;
                        state.vulList = vulList;
                        state.dataLoaded = true;
                        state.riskNaming = fetched.data.riskNaming;
                        state.lastChecked = fetched.data.lastChecked;
                        state.vulEnabled = fetched.data.vulEnabled;
                })
            )
        } catch (e) {
            console.error(e);
        }
    },

    vulnerabilityCount: () => {
        let vuls = get().vulList;
        //we group the data by risk level
        //first we make vuls an array
        let vulsArray = [];
        Object.keys(vuls).forEach(function (key) {
            vulsArray.push(vuls[key]);
        });
        let riskLevels = ['c', 'h', 'm', 'l'];
        //we count the amount of vulnerabilities per risk level
        return riskLevels.map(function (level) {
            return {
                level: level,
                count: vulsArray.filter(function (vul) {
                    return vul.risk_level === level;
                }).length
            };
        });
    },

    vulnerabilityScore: () => {
        let score = 0;
        let vulnerabiltiesList = get().vulList;

        Object.keys(vulnerabiltiesList).forEach(function (key) {
            //if there are vulnerabilities with critical severity, score is 5
            if (vulnerabiltiesList[key].risk_level === 'c') {
                score = 5;
            } else if (score < 1) {
                score = 1;
            }
        });
        return score;
    },

    hardeningScore: () => {
        let score = 0;
        let vulnerabiltiesList = get().vulnerabilities;
        for (let i = 0; i < vulnerabiltiesList.length; i++) {
            score += vulnerabiltiesList[i].hardening_score;
        }
        return score;
    },

}));

export default useVulnerabilityData;