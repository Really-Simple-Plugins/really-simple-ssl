var R=Object.create;var d=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var m=(e,n)=>{for(var s in n)d(e,s,{get:n[s],enumerable:!0})},h=(e,n,s,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let t of b(n))!x.call(e,t)&&t!==s&&d(e,t,{get:()=>n[t],enumerable:!(i=W(n,t))||i.enumerable});return e};var V=(e,n,s)=>(s=e!=null?R(A(e)):{},h(n||!e||!e.__esModule?d(s,"default",{value:e,enumerable:!0}):s,e)),D=e=>h(d({},"__esModule",{value:!0}),e);var I={};m(I,{lint:()=>j,ruleType:()=>U});module.exports=D(I);var M=require("semver"),O=e=>typeof e=="object"&&e.hasOwnProperty("exceptions");var F=(e,n)=>e.startsWith(n,0),f=(e,n,s,i)=>{let t=!0,a=[],u=[];if(!e.hasOwnProperty(n))return{onlyValidVersionsDetected:t,dependenciesWithValidVersionRange:[],dependenciesWithoutValidVersionRange:[]};for(let o in e[n]){if(O(i)&&i.exceptions.includes(o))continue;let y=e[n][o];F(y,s)?a.push(o):(t=!1,u.push(o))}return{onlyValidVersionsDetected:t,dependenciesWithValidVersionRange:a,dependenciesWithoutValidVersionRange:u}};var P=require("jsonc-parser"),g=(e,n)=>e.hasOwnProperty(n);var r=V(require("chalk")),l=V(require("log-symbols"));var c=class{constructor(n,s,i,t){this.lintId=n,this.severity=s,this.node=i,this.lintMessage=t}toString(){let n=this.severity==="error"?l.default.error:l.default.warning,s=r.default.cyan.bold(this.lintId),i=r.default.magenta.bold(this.node),t=this.severity==="error"?r.default.red.bold(this.lintMessage):r.default.yellow(this.lintMessage);return`${n} ${s} - node: ${i} - ${t}`}};var v="prefer-caret-version-dependencies",p="dependencies",U="optionalObject",j=(e,n,s)=>{let t=f(e,p,"^",s);return g(e,p)&&!t.onlyValidVersionsDetected?new c(v,n,p,`You are using an invalid version range. Please use ^. Invalid ${p} include: ${t.dependenciesWithoutValidVersionRange.join(", ")}`):null};0&&(module.exports={lint,ruleType});
