var v=Object.create;var g=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var S=(r,t)=>{for(var n in t)g(r,n,{get:t[n],enumerable:!0})},y=(r,t,n,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let e of O(t))!x.call(r,e)&&e!==n&&g(r,e,{get:()=>t[e],enumerable:!(o=P(t,e))||o.enumerable});return r};var u=(r,t,n)=>(n=r!=null?v(w(r)):{},y(t||!r||!r.__esModule?g(n,"default",{value:r,enumerable:!0}):n,r)),j=r=>y(g({},"__esModule",{value:!0}),r);var I={};S(I,{lint:()=>A,minItems:()=>$,ruleType:()=>V});module.exports=j(I);var b=u(require("semver"));var a=u(require("chalk")),m=u(require("log-symbols"));var s=class{constructor(t,n,o,e){this.lintId=t,this.severity=n,this.node=o,this.lintMessage=e}toString(){let t=this.severity==="error"?m.default.error:m.default.warning,n=a.default.cyan.bold(this.lintId),o=a.default.magenta.bold(this.node),e=this.severity==="error"?a.default.red.bold(this.lintMessage):a.default.yellow(this.lintMessage);return`${t} ${n} - node: ${o} - ${e}`}};var d=u(require("is-plain-obj"));var p=(r,t)=>r.hasOwnProperty(t)?(0,d.default)(r[t]):!0;var h=(r,t,n,o)=>r.hasOwnProperty(t)?o.includes(n):!0;var f="valid-values-engines",i="engines",V="array",$=1,A=(r,t,n)=>{if(r.hasOwnProperty(i))if(p(r,i)){let o=n.map(l=>JSON.stringify(l)),e=JSON.stringify(r[i]);if(!h(r,i,e,o))return new s(f,t,i,`Invalid value for engines. Current value is ${e}. Value values include: ${o.join(", ")}.`);for(let l in r[i]){let c=r[i][l];if(b.default.validRange(c)===null)return new s(f,t,i,`engines, ${l} version range is invalid. Currently set to ${c}`)}}else return new s(f,t,i,"engines node has invalid data type");return null};0&&(module.exports={lint,minItems,ruleType});
