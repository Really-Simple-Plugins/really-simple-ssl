var g=Object.create;var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var A=(e,n)=>{for(var s in n)c(e,s,{get:n[s],enumerable:!0})},u=(e,n,s,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of W(n))!b.call(e,i)&&i!==s&&c(e,i,{get:()=>n[i],enumerable:!(t=y(n,i))||t.enumerable});return e};var h=(e,n,s)=>(s=e!=null?g(R(e)):{},u(n||!e||!e.__esModule?c(s,"default",{value:e,enumerable:!0}):s,e)),x=e=>u(c({},"__esModule",{value:!0}),e);var P={};A(P,{lint:()=>v,ruleType:()=>m});module.exports=x(P);var j=require("semver"),D=e=>typeof e=="object"&&e.hasOwnProperty("exceptions");var O=e=>e.endsWith(".tgz")||e.endsWith(".tar.gz")||e.endsWith(".zip");var V=(e,n,s)=>{let t=!1,i=[],a=[];for(let d in e[n]){if(D(s)&&s.exceptions.includes(d))continue;let f=e[n][d];O(f)?(t=!0,i.push(d)):a.push(d)}return{hasArchiveUrlVersions:t,dependenciesWithArchiveUrlVersion:i,dependenciesWithoutArchiveUrlVersion:a}};var o=h(require("chalk")),l=h(require("log-symbols"));var p=class{constructor(n,s,t,i){this.lintId=n,this.severity=s,this.node=t,this.lintMessage=i}toString(){let n=this.severity==="error"?l.default.error:l.default.warning,s=o.default.cyan.bold(this.lintId),t=o.default.magenta.bold(this.node),i=this.severity==="error"?o.default.red.bold(this.lintMessage):o.default.yellow(this.lintMessage);return`${n} ${s} - node: ${t} - ${i}`}};var F="no-archive-dependencies",r="dependencies",m="optionalObject",v=(e,n,s)=>{let t=V(e,r,s);return e.hasOwnProperty(r)&&t.hasArchiveUrlVersions?new p(F,n,r,`You are using ${r} via url to archive file. Please use ${r} from npm. Invalid ${r} include: ${t.dependenciesWithArchiveUrlVersion.join(", ")}`):null};0&&(module.exports={lint,ruleType});
