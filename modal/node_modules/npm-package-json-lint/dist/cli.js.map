{
  "version": 3,
  "sources": ["../src/cli.ts", "../src/npm-package-json-lint.ts", "../src/configuration.ts", "../src/config/ConfigSchema.ts", "../src/config/ConfigValidator.ts", "../src/config/cosmicConfigTransformer.ts", "../src/config/applyExtendsIfSpecified.ts", "../src/file-parser.ts", "../src/config/applyOverrides.ts", "../src/native-rules.ts", "../src/linter/linter.ts", "../src/linter/results-helper.ts", "../src/utils/getFileList.ts", "../src/utils/getIgnorer.ts", "../src/console-reporter.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n\nimport chalk from 'chalk';\nimport meow from 'meow';\nimport {NpmPackageJsonLint} from './npm-package-json-lint';\nimport {write} from './console-reporter';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:cli');\n\nconst exitCodes = {\n  zeroClean: 0,\n  oneMissingTarget: 1,\n  twoLintErrorsDetected: 2,\n  runTimeException: 3,\n  exceedMaxWarnings: 4,\n};\n\n// configure cli\nconst cli = meow(\n  `\n      Usage\n        $ npmPkgJsonLint <patterns>\n\n      Options\n        --quiet, -q Report errors only\n        --noConfigFiles, -ncf Disables use of .npmpackagejsonlintrc.json files, npmpackagejsonlint.config.js files, and npmpackagejsonlint object in package.json file.\n        --configFile, -c File path of .npmpackagejsonlintrc.json\n        --ignorePath, -i Path to a file containing patterns that describe files to ignore. The path can be absolute or relative to process.cwd(). By default, npm-package-json-lint looks for .npmpackagejsonlintignore in process.cwd().\n        --maxWarnings, -mw Maximum number of warnings that can be detected before an error is thrown.\n        --allowEmptyTargets Do not throw an error when a list of targets is empty.\n\n      Examples\n        $ npmPkgJsonLint --version\n        $ npmPkgJsonLint .\n        $ npmPkgJsonLint ./packages\n        $ npmPkgJsonLint ./package1 ./package2\n        $ npmPkgJsonLint -c ./config/.npmpackagejsonlintrc.json .\n        $ npmPkgJsonLint --configFile ./config/npmpackagejsonlint.config.json .\n        $ npmPkgJsonLint -q .\n        $ npmPkgJsonLint --quiet ./packages\n        $ npmPkgJsonLint . --ignorePath .gitignore\n        $ npmPkgJsonLint . -i .gitignore\n        $ npmPkgJsonLint . --maxWarnings 10\n        $ npmPkgJsonLint . -mw 10\n`,\n  {\n    flags: {\n      quiet: {\n        type: 'boolean',\n        alias: 'q',\n        default: false,\n      },\n      noConfigFiles: {\n        type: 'boolean',\n        alias: 'ncf',\n        default: false,\n      },\n      configFile: {\n        type: 'string',\n        alias: 'c',\n        default: '',\n      },\n      ignorePath: {\n        type: 'string',\n        alias: 'i',\n        default: '',\n      },\n      maxWarnings: {\n        type: 'number',\n        alias: 'mw',\n        default: 10000000,\n      },\n      allowEmptyTargets: {\n        type: 'boolean',\n        default: false,\n      },\n    },\n  }\n);\n\nconst {input, flags} = cli;\n\n// Validate\nconst noPatternsProvided = 0;\nconst patterns = input;\n\ndebug(`patterns: ${patterns}`);\n\nif (patterns.length === noPatternsProvided) {\n  debug(`No lint targets provided`);\n  console.log(chalk.red.bold('No lint targets provided'));\n\n  const exitCode = flags.allowEmptyTargets ? exitCodes.zeroClean : exitCodes.oneMissingTarget;\n\n  process.exit(exitCode);\n}\n\ntry {\n  let exitCode = exitCodes.zeroClean;\n  const noIssues = 0;\n\n  debug(`Creating NpmPackageJsonLint instance`);\n  const npmPackageJsonLint = new NpmPackageJsonLint({\n    cwd: process.cwd(),\n    configFile: flags.configFile,\n    patterns,\n    ignorePath: flags.ignorePath,\n    quiet: flags.quiet,\n  });\n  const linterOutput = npmPackageJsonLint.lint();\n\n  debug(`NpmPackageJsonLint.lint complete`);\n\n  debug(`Reporter.write starting`);\n  write(linterOutput, flags.quiet);\n  debug(`Reporter.write complete`);\n\n  if (linterOutput.warningCount > flags.maxWarnings) {\n    debug(`Max warnings exceeded`);\n    exitCode = exitCodes.exceedMaxWarnings;\n  }\n\n  if (linterOutput.errorCount > noIssues) {\n    debug(`Lint errors detected`);\n    exitCode = exitCodes.twoLintErrorsDetected;\n  }\n\n  process.exit(exitCode);\n} catch (error) {\n  console.log(chalk.red.bold(error.message));\n  process.exit(exitCodes.runTimeException);\n}\n", "import isPlainObj from 'is-plain-obj';\nimport slash from 'slash';\nimport {PackageJson} from 'type-fest';\nimport {Config} from './configuration';\nimport {Rules} from './native-rules';\nimport {executeOnPackageJsonFiles, executeOnPackageJsonObject, OverallLintingResult} from './linter/linter';\nimport {getFileList} from './utils/getFileList';\nimport {getIgnorer} from './utils/getIgnorer';\nimport {Severity} from './types/severity';\nimport {PackageJsonFileLintingResult} from './types/package-json-linting-result';\nimport {LintIssue} from './lint-issue';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:NpmPackageJsonLint');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../package.json');\n\nconst noIssues = 0;\n\n/**\n * Checks if the given issue is an error issue.\n *\n * @param issue A {@link LintIssue} object\n * @returns True if error, false if warning.\n * @private\n */\nconst isIssueAnError = (issue: LintIssue): boolean => issue.severity === Severity.Error;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPackageJsonObjectValid = (packageJsonObject: PackageJson | any): boolean => isPlainObj(packageJsonObject);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst areRequiredOptionsValid = (packageJsonObject: PackageJson | any, patterns: string[]): boolean =>\n  (!patterns && !isPackageJsonObjectValid(packageJsonObject)) ||\n  (patterns && (packageJsonObject || isPackageJsonObjectValid(packageJsonObject)));\n\n/**\n * Filters results to only include errors.\n *\n * @param results The results to filter.\n * @returns The filtered results.\n */\nconst getErrorResults = (results: PackageJsonFileLintingResult[]): PackageJsonFileLintingResult[] => {\n  const filtered = [];\n\n  results.forEach((result) => {\n    // eslint-disable-next-line unicorn/no-array-callback-reference\n    const filteredIssues = result.issues.filter(isIssueAnError);\n\n    if (filteredIssues.length > noIssues) {\n      const filteredResult = {\n        issues: filteredIssues,\n        errorCount: filteredIssues.length,\n        warningCount: 0,\n      };\n\n      filtered.push(Object.assign(result, filteredResult));\n    }\n  });\n\n  return filtered;\n};\n\nexport interface NpmPackageJsonLintOptions {\n  cwd?: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  packageJsonObject?: any;\n  packageJsonFilePath?: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  config?: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  configFile?: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  configBaseDirectory?: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patterns?: any;\n  quiet?: boolean;\n  ignorePath?: string;\n  fix?: boolean;\n}\n\nexport class NpmPackageJsonLint {\n  cwd: string;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  packageJsonObject: any;\n\n  packageJsonFilePath: string;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patterns: any;\n\n  quiet: boolean;\n\n  ignorePath: string;\n\n  fix: boolean;\n\n  version: string;\n\n  rules: Rules;\n\n  configHelper: Config;\n\n  /**\n   * constructor\n   * @param options An instance of the {@link NpmPackageJsonLintOptions} options object.\n   * @constructor\n   */\n  constructor(options: NpmPackageJsonLintOptions) {\n    const {\n      cwd,\n      packageJsonObject,\n      packageJsonFilePath,\n      config,\n      configFile,\n      configBaseDirectory,\n      patterns,\n      quiet,\n      ignorePath,\n      fix,\n    } = options;\n\n    this.cwd = slash(cwd || process.cwd());\n\n    this.packageJsonObject = packageJsonObject;\n    this.packageJsonFilePath = packageJsonFilePath ? slash(packageJsonFilePath) : packageJsonFilePath;\n    this.patterns = patterns;\n    this.quiet = quiet || false;\n    this.ignorePath = ignorePath || '';\n    this.fix = fix || false;\n\n    this.version = pkg.version;\n\n    this.rules = new Rules();\n    this.rules.load();\n\n    this.configHelper = new Config(this.cwd, config, configFile, configBaseDirectory, this.rules);\n  }\n\n  /**\n   * Runs the linter using the config specified in the constructor\n   *\n   * @returns The results {@link OverallLintingResult} from linting a collection of package.json files.\n   */\n  lint(): OverallLintingResult {\n    debug('Starting lint');\n\n    if (areRequiredOptionsValid(this.packageJsonObject, this.patterns)) {\n      throw new Error(\n        'You must pass npm-package-json-lint a `patterns` glob or a `packageJsonObject` string, though not both.'\n      );\n    }\n\n    const ignorer = getIgnorer(this.cwd, this.ignorePath);\n    let linterOutput: OverallLintingResult;\n\n    if (this.patterns) {\n      debug('Linting using patterns');\n\n      if (!Array.isArray(this.patterns)) {\n        throw new TypeError('Patterns must be an array.');\n      }\n\n      const fileList = getFileList(this.patterns, this.cwd);\n\n      linterOutput = executeOnPackageJsonFiles({\n        cwd: this.cwd,\n        fileList,\n        ignorer,\n        configHelper: this.configHelper,\n        rules: this.rules,\n      });\n    } else {\n      debug('Linting using passed object.');\n      linterOutput = executeOnPackageJsonObject({\n        cwd: this.cwd,\n        packageJsonObject: this.packageJsonObject,\n        ignorer,\n        filename: this.packageJsonFilePath,\n        configHelper: this.configHelper,\n        rules: this.rules,\n      });\n    }\n\n    if (this.quiet) {\n      const errorsOnly = getErrorResults(linterOutput.results);\n\n      return {\n        results: errorsOnly,\n        ignoreCount: linterOutput.ignoreCount,\n        errorCount: linterOutput.errorCount,\n        warningCount: linterOutput.warningCount,\n      };\n    }\n\n    debug('lint complete');\n\n    return linterOutput;\n  }\n}\n", "import {cosmiconfigSync} from 'cosmiconfig';\nimport {validateRules} from './config/ConfigValidator';\nimport {transform} from './config/cosmicConfigTransformer';\nimport {applyExtendsIfSpecified} from './config/applyExtendsIfSpecified';\nimport {applyOverrides} from './config/applyOverrides';\nimport {Rules} from './native-rules';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:Config');\n\nconst noRules = 0;\n\n/**\n * Config class\n * @class\n */\nexport class Config {\n  /**\n   * The user passed config object.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  config: any;\n\n  /**\n   * The current working directory.\n   */\n  cwd: string;\n\n  /**\n   * The user passed configFile path.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  configFile: any;\n\n  /**\n   * The base directory that config should be pulled from.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  configBaseDirectory: any;\n\n  /**\n   * Rules object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  rules: any;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(cwd: string, config: any, configFile: any, configBaseDirectory: any, rules: Rules) {\n    if (config) {\n      this.config = applyExtendsIfSpecified(config, 'PassedConfig');\n    }\n\n    this.cwd = cwd;\n    this.configFile = configFile;\n    this.configBaseDirectory = configBaseDirectory;\n    this.rules = rules;\n  }\n\n  /**\n   * Gets the config for a file.\n   *\n   * @param filePath File path of the file being linted.\n   * @returns {Object} A config object.\n   * @memberof Config\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  getConfigForFile(filePath: string) {\n    debug(`Getting config for ${filePath}`);\n    const filePathToSearch = filePath;\n\n    debug(`filePathToSearch: ${filePathToSearch}`);\n    let config;\n\n    if (typeof this.config === 'undefined') {\n      debug(`User passed config is undefined.`);\n      if (this.configFile) {\n        debug(`Config file specified, loading it.`);\n        config = cosmiconfigSync('npmpackagejsonlint', {\n          transform: transform(this.cwd, this.configBaseDirectory, filePath),\n        }).load(this.configFile);\n      } else {\n        debug(`Config file wasn't specified, searching for config.`);\n        config = cosmiconfigSync('npmpackagejsonlint', {\n          transform: transform(this.cwd, this.configBaseDirectory, filePathToSearch),\n        }).search(filePathToSearch);\n      }\n    } else {\n      debug(`User passed config is set, using it.`);\n      const configBeforeOverrides = this.config;\n\n      debug(`Applying overrides to config for ${filePath}`);\n      config = applyOverrides(this.cwd, filePath, configBeforeOverrides.rules, configBeforeOverrides.overrides);\n\n      debug(`Overrides applied for ${filePath}`);\n    }\n\n    if (!config) {\n      throw new Error(`No npm-package-json-lint configuration found.\\n${filePathToSearch}`);\n    }\n\n    if (Object.keys(config).length === noRules) {\n      throw new Error(`No rules specified in configuration.\\n${filePathToSearch}`);\n    }\n\n    debug(`Overrides applied for ${filePath}`);\n    debug('Final Config');\n    debug(config);\n\n    validateRules(config, 'cli', this.rules);\n\n    return config;\n  }\n}\n", "import Ajv from 'ajv';\nimport ajvErrors from 'ajv-errors';\n\nconst ajv = new Ajv({allErrors: true, jsonPointers: true});\n\najvErrors(ajv);\n\n/**\n * Formats an array of schema validation errors.\n *\n * @param {Array} errors An array of error messages to format.\n * @returns {String} Formatted error message\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst formatSchemaErrors = (errors) => errors.map((error) => `\\t- ${error.message}\\n`).join('');\n\nconst standardRuleSchema = {\n  type: 'string',\n  enum: ['off', 'warning', 'error'],\n  errorMessage: {\n    type: 'severity must be a string.',\n    enum: 'severity must be either \"off\", \"warning\", or \"error\".',\n  },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst arrayRuleSchema = (minItems: any): any => ({\n  type: 'array',\n  items: [\n    standardRuleSchema,\n    {\n      type: 'array',\n      minItems,\n      uniqueItems: true,\n      errorMessage: {\n        type: 'the second item in an array rule config must be an array.',\n        minItems: 'the second item in an array rule config must have at least 1 item.',\n        uniqueItems: 'the second item in an array rule config must have unique items.',\n      },\n    },\n  ],\n  minItems: 2,\n  maxItems: 2,\n  additionalItems: false,\n  errorMessage: {\n    type: 'rule config must be an array, e.g. [\"error\", [\"value1\", \"value2\"]].',\n    minItems: 'array rules must have two items, severity and options array. e.g. [\"error\", [\"value1\", \"value2\"]].',\n    maxItems: 'array rules must have two items, severity and options array. e.g. [\"error\", [\"value1\", \"value2\"]].',\n    additionalItems:\n      'array rules are only allowed two items, severity and the list is values. e.g. [\"error\", [\"value1\", \"value2\"]].',\n  },\n});\n\nconst objectRuleSchema = {\n  type: 'array',\n  items: [\n    standardRuleSchema,\n    {\n      type: 'object',\n      errorMessage: {\n        type: 'the second item in an object rule config must be an object.',\n      },\n    },\n  ],\n  minItems: 2,\n  maxItems: 2,\n  additionalItems: false,\n  errorMessage: {\n    type: 'rule config must be an array, e.g. [\"error\", {}].',\n    minItems: 'object rules must have two items, severity and options object. e.g. [\"error\", {}].',\n    maxItems: 'object rules must have two items, severity and options object. e.g. [\"error\", {}].',\n    additionalItems: 'object rules are only allowed two items, severity and options object. e.g. [\"error\", {}].',\n  },\n};\n\nconst optionalObjExceptionsSchema = {\n  type: 'array',\n  items: [\n    {\n      type: 'string',\n      errorMessage: {\n        type: 'each exception must be a string.',\n      },\n    },\n  ],\n  uniqueItems: true,\n  minItems: 1,\n  errorMessage: {\n    type: 'expections must be an array.',\n    minItems: 'expections must have at least 1 item.',\n    uniqueItems: 'expections must have unique items.',\n  },\n};\n\nconst configurationSchema = {\n  type: 'object',\n  properties: {\n    extends: {\n      type: ['string', 'array'],\n      items: {\n        type: 'string',\n      },\n      minItems: 1,\n      uniqueItems: true,\n      errorMessage: {\n        type: 'extends must be either a string or an array of strings.',\n        minItems: 'extends must have at least one item if it is an array.',\n        uniqueItems: 'extends must have unique items if it is an array.',\n      },\n    },\n    rules: {\n      type: 'object',\n      errorMessage: {\n        type: 'rules must be an object.',\n      },\n    },\n    root: {\n      type: 'boolean',\n      errorMessage: {\n        type: 'root must be a boolean.',\n      },\n    },\n  },\n  additionalProperties: false,\n  errorMessage: {\n    type: 'npm-package-json-lint config should be an object.',\n    additionalProperties:\n      'npm-package-json-lint config has unexpected top-level property. Valid properties include: `extends`, `rules`, and `root`.',\n  },\n};\n\n/**\n * Validates standard rules config.\n *\n * @param {Object} ruleConfig The ruleConfig object to validate.\n * @returns {boolean} True if valid. Error if not.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isStandardRuleSchemaValid = (ruleConfig: any): any => {\n  const validate = ajv.compile(standardRuleSchema);\n  const isValid = validate(ruleConfig);\n\n  if (!isValid) {\n    throw new Error(`${formatSchemaErrors(validate.errors)}`);\n  }\n\n  return true;\n};\n\n/**\n * Validates array rules config.\n *\n * @param {Object} ruleConfig The ruleConfig object to validate.\n * @param {number} minItems   Min number of items in the array\n * @returns {boolean} True if valid. Error if not.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isArrayRuleSchemaValid = (ruleConfig: any, minItems: any): any => {\n  const validate = ajv.compile(arrayRuleSchema(minItems));\n  const isValid = validate(ruleConfig);\n\n  if (!isValid) {\n    throw new Error(`${formatSchemaErrors(validate.errors)}`);\n  }\n\n  return true;\n};\n\n/**\n * Validates array rules config.\n *\n * @param {Object} ruleConfig The ruleConfig object to validate.\n * @returns {boolean} True if valid. Error if not.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isObjectRuleSchemaValid = (ruleConfig: any): any => {\n  const validate = ajv.compile(objectRuleSchema);\n  const isValid = validate(ruleConfig);\n\n  if (!isValid) {\n    throw new Error(`${formatSchemaErrors(validate.errors)}`);\n  }\n\n  return true;\n};\n\n/**\n * Validates optional object exceptions config.\n *\n * @param {Object} ruleConfig The ruleConfig object to validate.\n * @returns {boolean} True if valid. Error if not.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isOptionalObjExceptSchemaValid = (ruleConfig: any): any => {\n  const validate = ajv.compile(optionalObjExceptionsSchema);\n  const isValid = validate(ruleConfig);\n\n  if (!isValid) {\n    throw new Error(`${formatSchemaErrors(validate.errors)}`);\n  }\n\n  return true;\n};\n\n/**\n * Validates the top level properties of the config object.\n *\n * @param {Object} config The config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @returns {boolean} True if valid. Error if not.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isConfigObjectSchemaValid = (config: any, source: any): any => {\n  const validate = ajv.compile(configurationSchema);\n  const isValid = validate(config);\n\n  if (!isValid) {\n    throw new Error(`npm-package-json-lint configuration in ${source} is invalid:\\n${formatSchemaErrors(validate.errors)}`);\n  }\n\n  return true;\n};\n", "import {RuleType} from '../types/rule-type';\nimport {\n  isArrayRuleSchemaValid,\n  isConfigObjectSchemaValid,\n  isObjectRuleSchemaValid,\n  isOptionalObjExceptSchemaValid,\n  isStandardRuleSchemaValid,\n} from './ConfigSchema';\n\n/**\n * Validates object rule config\n *\n * @param  {Object}     ruleConfig  Object rule\n * @return {Boolean}               True if config is valid, false if not\n * @static\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isObjectRuleConfigValid = (ruleConfig: any): any => {\n  if (typeof ruleConfig === 'string' && ruleConfig === 'off') {\n    return true;\n  }\n\n  if (typeof ruleConfig === 'string' && ruleConfig !== 'off') {\n    throw new Error('\\t- is an object type rule. It must be set to \"off\" if an object is not supplied.');\n  }\n\n  return isObjectRuleSchemaValid(ruleConfig);\n};\n\n/**\n * Validates optional object rule config\n *\n * @param  {Object}   ruleConfig  Object rule\n * @return {Boolean}              True if config is valid, false if not\n * @static\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isOptionalObjRuleConfigValid = (ruleConfig: any): any => {\n  const object = 1;\n\n  if (typeof ruleConfig === 'string') {\n    return isStandardRuleSchemaValid(ruleConfig);\n  }\n\n  if (isObjectRuleSchemaValid(ruleConfig) && ruleConfig[object].hasOwnProperty('exceptions')) {\n    return isOptionalObjExceptSchemaValid(ruleConfig[object].exceptions);\n  }\n\n  return true;\n};\n\n/**\n * Validates array rule config\n *\n * @param  {Array}     ruleConfig  Array rule\n * @param  {number}    minItems    Min number of items in the array\n * @return {Boolean}               True if config is valid, false if not\n * @static\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isArrayRuleConfigValid = (ruleConfig: any, minItems: any): any => {\n  if (typeof ruleConfig === 'string' && ruleConfig === 'off') {\n    return true;\n  }\n\n  if (typeof ruleConfig === 'string' && ruleConfig !== 'off') {\n    throw new Error('\\t- is an array type rule. It must be set to \"off\" if an array is not supplied.');\n  }\n\n  return isArrayRuleSchemaValid(ruleConfig, minItems);\n};\n\n/**\n * Validates standard rule config\n *\n * @param {Object}      ruleConfig  Value for standard rule config\n * @return {Boolean}                True if config is valid, error if not\n * @static\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isStandardRuleConfigValid = (ruleConfig: any): any => isStandardRuleSchemaValid(ruleConfig);\n\n/**\n * Validates configuration of a rule\n *\n * @param {Object} ruleModule The rule object.\n * @param {string} ruleName The rule's unique name.\n * @param {Array|String} userConfig The user's configuration for a rule.\n * @param {String|null} source The name of the configuration source to report in any errors.\n * @returns {undefined} No return\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst validateRule = (ruleModule: any, ruleName: any, userConfig: any, source: any): any => {\n  if (ruleModule) {\n    try {\n      switch (ruleModule.ruleType) {\n        case RuleType.Array: {\n          isArrayRuleConfigValid(userConfig, ruleModule.minItems);\n\n          break;\n        }\n        case RuleType.Object: {\n          isObjectRuleConfigValid(userConfig);\n\n          break;\n        }\n        case RuleType.OptionalObject: {\n          isOptionalObjRuleConfigValid(userConfig);\n\n          break;\n        }\n        default: {\n          isStandardRuleConfigValid(userConfig);\n        }\n      }\n    } catch (error_) {\n      const modifiedErrorMessage = `Configuration for rule \"${ruleName}\" is invalid:\\n${error_.message}`;\n\n      const error =\n        typeof source === 'string' ? new Error(`${source}:\\n\\t${modifiedErrorMessage}`) : new Error(modifiedErrorMessage);\n\n      throw error;\n    }\n  }\n};\n\n/**\n * Validates only the rules of a config object\n *\n * @param {Object} rulesConfig The rules config object to validate.\n * @param {String} source The name of the configuration source to report in any errors.\n * @param {Object} rules  Rules object\n * @returns {undefined} No return\n * @static\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const validateRules = (rulesConfig: any, source: any, rules: any): any => {\n  if (!rulesConfig) {\n    return;\n  }\n\n  Object.keys(rulesConfig).forEach((ruleName) => {\n    const ruleModule = rules.get(ruleName);\n\n    validateRule(ruleModule, ruleName, rulesConfig[ruleName], source);\n  });\n};\n\n/**\n * Validates entire config object, including top-level properties.\n *\n * @param {Object} config The config object to validate.\n * @param {String} source The name of the configuration source to report in any errors.\n * @param {Object} rules  Rules object\n * @returns {undefined} No return\n * @static\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const validate = (config: any, source: any, rules: any): any => {\n  isConfigObjectSchemaValid(config, source);\n  validateRules(config.rules, source, rules);\n};\n", "import path from 'path';\nimport {applyExtendsIfSpecified} from './applyExtendsIfSpecified';\nimport {applyOverrides} from './applyOverrides';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:cosmicConfigTransformer');\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const transform = (cwd: any, configBaseDirectory: any, filePathBeingLinted: any): any => {\n  debug(`cwd: ${cwd}`);\n  debug(`configBaseDirectory`);\n  debug(configBaseDirectory);\n\n  return (cosmiconfigResult) => {\n    debug(`cosmiconfigResult`);\n    debug(cosmiconfigResult);\n\n    if (!cosmiconfigResult) {\n      return null;\n    }\n\n    const {config, filepath} = cosmiconfigResult;\n\n    debug(`cosmiconfigResult.config`);\n    debug(config);\n    debug(`cosmiconfigResult.filepath`);\n    debug(filepath);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const configDir = configBaseDirectory || path.dirname(filepath || '');\n    const npmPackageJsonLintConfig = {...config};\n\n    const configAfterExtends = applyExtendsIfSpecified(npmPackageJsonLintConfig, filePathBeingLinted);\n    const configAfterOverrides = applyOverrides(\n      cwd,\n      filePathBeingLinted,\n      configAfterExtends.rules,\n      configAfterExtends.overrides\n    );\n\n    return configAfterOverrides;\n  };\n};\n", "import path from 'path';\nimport {parseJavaScriptFile, parseJsonFile} from '../file-parser';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:applyExtendsIfSpecified');\n\n/**\n * Applies values from the 'extends' field in a configuration file.\n *\n * @param {Object} config         The configuration information.\n * @param {string} parentName     Name of parent. For troubleshooting.\n * @param {Object} originalFilePath Base config file the extends originated from\n * @returns {Object} A new configuration object with all of the 'extends' fields loaded and merged.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst applyExtends = (config: any, parentName: any, originalFilePath: any): any => {\n  let configExtends = config.extends;\n\n  if (!Array.isArray(config.extends)) {\n    configExtends = [config.extends];\n  }\n\n  // eslint-disable-next-line unicorn/no-array-reduce\n  return configExtends.reduceRight((previousConfig, moduleName) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const extendsConfig = loadFromModule(moduleName, originalFilePath);\n\n      // Merge base object\n      const mergedConfig = {...extendsConfig, ...previousConfig};\n\n      // Merge rules\n      const rules = {...extendsConfig.rules, ...previousConfig.rules};\n\n      // Merge plugins, if exist\n      const extendsConfigPlugins = Array.isArray(extendsConfig.plugins) ? extendsConfig.plugins : [];\n      const previousConfigPlugins = Array.isArray(previousConfig.plugins) ? previousConfig.plugins : [];\n      const plugins = [...extendsConfigPlugins, ...previousConfigPlugins];\n      const uniquePlugins = [...new Set(plugins)];\n\n      // Merge overrides, if exist\n      const extendsConfigOverrides = Array.isArray(extendsConfig.overrides) ? extendsConfig.overrides : [];\n      const previousConfigOverrides = Array.isArray(previousConfig.overrides) ? previousConfig.overrides : [];\n      const overrides = [...extendsConfigOverrides, ...previousConfigOverrides];\n\n      // Override merged rules\n      mergedConfig.rules = rules;\n\n      if (plugins.length > 0) {\n        mergedConfig.plugins = uniquePlugins;\n      }\n\n      if (overrides.length > 0) {\n        mergedConfig.overrides = overrides;\n      }\n\n      return mergedConfig;\n    } catch (error) {\n      error.message += `\\nReferenced from: ${parentName}`;\n      throw error;\n    }\n  }, config);\n};\n\n/**\n * Gets configuration from a extends config module\n *\n * @param  {String} moduleName       Name of the configuration module\n * @param  {Object} originalFilePath Base config file the extends originated from\n * @return {Object}                  Configuration object\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst loadFromModule = (moduleName: any, originalFilePath: any): any => {\n  let config = {};\n  let adjustedModuleName = moduleName;\n\n  if (moduleName.startsWith('./')) {\n    // TODO: handle process.cwd() option\n    adjustedModuleName = path.join(process.cwd(), moduleName);\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    config = loadConfigFile(adjustedModuleName);\n  } else {\n    const resolvedModule = require.resolve(adjustedModuleName, {paths: [path.dirname(originalFilePath)]});\n\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    config = require(resolvedModule);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  if (Object.keys(config).length > 0 && config.extends) {\n    config = applyExtends(config, adjustedModuleName, originalFilePath);\n  }\n\n  return config;\n};\n\n/**\n * Loads a configuration file regardless of the source. Inspects the file path\n * to determine the correctly way to load the config file.\n *\n * @param {Object} filePath The path to the configuration.\n * @returns {Object} The configuration information.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst loadConfigFile = (filePath: any): any => {\n  let config = {};\n\n  switch (path.extname(filePath)) {\n    case '.js': {\n      config = parseJavaScriptFile(filePath);\n      break;\n    }\n\n    case '.json': {\n      config = parseJsonFile(filePath);\n      break;\n    }\n\n    default: {\n      throw new Error(`Unsupport config file extension. File path: ${filePath}`);\n    }\n  }\n\n  return config;\n};\n\n/**\n * Loads a configuration file from the given file path.\n *\n * @param {Object} npmPackageJsonLintConfig Parsed config from cosmicconfig\n * @param {string} filepath the path to the config file\n * @returns {Object} the parsed config object (empty object if there was a parse error)\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const applyExtendsIfSpecified = (npmPackageJsonLintConfig: any, filepath: any): any => {\n  let config = {...npmPackageJsonLintConfig};\n\n  debug('Loading extends, if applicable');\n  if (config?.hasOwnProperty('extends') && config.extends) {\n    debug('extends property present, applying.');\n    config = applyExtends(config, filepath, filepath);\n  }\n\n  debug('Loading extends complete');\n\n  return config;\n};\n", "import fs from 'fs';\nimport stripComments from 'strip-json-comments';\n\n/**\n * Require JavaScript file\n *\n * @param fileName String file path of file to load\n * @internal\n */\n// eslint-disable-next-line import/no-dynamic-require, global-require\nconst requireFile = (fileName: string): NodeRequire => require(fileName);\n\n/**\n * Sychronously reads file from file system\n *\n * @param fileName String file path of file to load\n * @internal\n */\nconst readFile = (fileName: string): string => fs.readFileSync(fileName, 'utf8').replace(/^\\uFEFF/, '');\n\n/**\n * Helper method for throwing errors when file fails to load.\n *\n * @param fileName Name of the file that failed to load.\n * @param err Error object\n * @throws {Error}\n * @internal\n */\nconst handleError = (fileName: string, err: Error): void => {\n  throw new Error(`Failed to read config file: ${fileName}. \\nError: ${err.message}`);\n};\n\nexport const sourceSymbol = Symbol('JSON source');\n\n/**\n * Parse a JSON file\n *\n * @param fileName String file path of file to load\n * @return Valid JSON\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const parseJsonFile = (fileName: string): Record<string, any> => {\n  let json = {};\n  let fileContents = '';\n\n  try {\n    fileContents = readFile(fileName);\n\n    json = JSON.parse(stripComments(fileContents));\n  } catch (error) {\n    handleError(fileName, error);\n  }\n\n  Object.defineProperty(json, sourceSymbol, {\n    value: fileContents,\n    enumerable: false,\n    writable: false,\n    configurable: false,\n  });\n\n  return json;\n};\n\n/**\n * Parse a JavaScript file\n *\n * @param fileName String file path of file to load\n * @return Valid JavaScript object\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const parseJavaScriptFile = (fileName: string): Record<string, any> => {\n  let obj = {};\n\n  try {\n    obj = requireFile(fileName);\n  } catch (error) {\n    handleError(fileName, error);\n  }\n\n  return obj;\n};\n", "import path from 'path';\nimport globby from 'globby';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:applyOverrides');\n\n/**\n * Applies values from the 'overrides' field in a configuration file.\n * @param {string} cwd       The current working directory.\n * @param {Object} filePath  The file path of the file being linted.\n * @param {Object} rules     Rules object\n * @param {Object} overrides Overrides object\n * @returns {Object} A new configuration object with all of the 'overrides' applied.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const applyOverrides = (cwd: string, filePath: string, rules: any, overrides?: any[]): any => {\n  let finalRules = {...rules};\n\n  debug('overrides');\n  debug(overrides);\n\n  if (overrides) {\n    overrides.forEach((override) => {\n      const filteredPatterns = override.patterns.filter((pattern) => pattern.length);\n      const transformedPatterns = filteredPatterns.map((pattern) =>\n        pattern.endsWith(`/package.json`) ? pattern : `${pattern}/package.json`\n      );\n\n      const globFiles = globby.sync(transformedPatterns, {\n        cwd,\n        gitignore: true,\n      });\n\n      debug('globFiles');\n      debug(globFiles);\n      globFiles.forEach((globFile) => {\n        const globbedFilePath = path.resolve(cwd, globFile);\n\n        if (filePath === globbedFilePath) {\n          finalRules = {...finalRules, ...override.rules};\n        }\n      });\n    });\n  }\n\n  debug('finalRules');\n  debug(finalRules);\n\n  return finalRules;\n};\n", "import chalk from 'chalk';\nimport {readdirSync} from 'fs';\nimport path from 'path';\nimport {LintFunction} from './types/lint-function';\nimport {RuleType} from './types/rule-type';\n\nexport interface Rule {\n  lint: LintFunction;\n  ruleType: RuleType;\n  minItems?: number;\n}\n\nexport class Rules {\n  rules: Record<string, string>;\n\n  constructor() {\n    this.rules = {};\n  }\n\n  /**\n   * Loads rules\n   *\n   * @return Set of rules\n   */\n  load(): Record<string, string> {\n    const rulesDirectory = path.join(__dirname, 'rules');\n\n    try {\n      readdirSync(rulesDirectory).forEach((filePath) => {\n        const beginIndex = 0;\n        const endIndex = -3;\n        // remove the file extension, e.g. `.js`\n        const ruleId = filePath.slice(beginIndex, endIndex);\n        const filePathToRuleModule = path.join(rulesDirectory, filePath);\n\n        this.registerRule(ruleId, filePathToRuleModule);\n      });\n\n      return this.rules;\n    } catch (error) {\n      throw new Error(`Error while loading rules from rules directory - ${error.message}`);\n    }\n  }\n\n  /**\n   * Loads a rule module\n   *\n   * @param ruleId Name of the rule\n   * @return Rule module\n   */\n  get(ruleId: string): Rule {\n    const rule = this.rules[ruleId];\n\n    if (typeof rule === 'undefined') {\n      const errorMsg = `Rule, ${ruleId}, is invalid. Please ensure it matches a valid option.`;\n\n      throw new Error(chalk.bold.red(errorMsg));\n    }\n\n    // eslint-disable-next-line import/no-dynamic-require, global-require, @typescript-eslint/no-var-requires\n    const ruleModule = require(this.rules[ruleId]);\n\n    return ruleModule;\n  }\n\n  /**\n   * Gets entire rule set\n   *\n   * @returns Rule set\n   */\n  getRules(): Record<string, string> {\n    return this.rules;\n  }\n\n  /**\n   * Registers a rule in the rules object\n   *\n   * @param ruleId Name of the rule\n   * @param filePathToRuleModule File path to rule\n   */\n  registerRule(ruleId: string, filePathToRuleModule: string): void {\n    this.rules[ruleId] = filePathToRuleModule;\n  }\n}\n", "import path from 'path';\nimport {PackageJson} from 'type-fest';\nimport {Ignore} from 'ignore';\nimport {Rules} from '../native-rules';\nimport {parseJsonFile} from '../file-parser';\nimport {LintIssue} from '../lint-issue';\nimport {RuleType} from '../types/rule-type';\nimport {Severity} from '../types/severity';\nimport {aggregateCountsPerFile, aggregateOverallCounts, OverallAggregatedResultCounts} from './results-helper';\nimport {Config} from '../configuration';\nimport {PackageJsonFileLintingResult} from '../types/package-json-linting-result';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:linter');\n\nexport interface CreateResultObjectOptions {\n  /**\n   * The current working directory.\n   */\n  cwd: string;\n  /**\n   * An optional string representing the package.json file.\n   */\n  fileName: string;\n  /**\n   * A flag indicating that the file was skipped.\n   */\n  ignored: boolean;\n  /**\n   * A list of issues.\n   */\n  issues: LintIssue[];\n  /**\n   * Number of errors.\n   */\n  errorCount: number;\n  /**\n   * Number of warnings.\n   */\n  warningCount: number;\n}\n\n/**\n * Creates a results object.\n *\n * @param options A {@link CreateResultObjectOptions} object\n * @returns The lint results {@link PackageJsonFileLintingResult} for the package.json file.\n * @internal\n */\nconst createResultObject = (options: CreateResultObjectOptions): PackageJsonFileLintingResult => {\n  const {cwd, fileName, ignored, issues, errorCount, warningCount} = options;\n\n  return {\n    filePath: `./${path.relative(cwd, fileName)}`,\n    issues,\n    ignored,\n    errorCount,\n    warningCount,\n  };\n};\n\n/**\n * Runs configured rules against the provided package.json object.\n *\n * @param packageJsonData Valid package.json data\n * @param configObj Configuration object\n * @param rules Object of rule definitions\n * @return An array of {@link LintIssue} objects.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst lint = (packageJsonData: any, configObj, rules: Rules): LintIssue[] => {\n  const lintIssues = [];\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const rule in configObj) {\n    const ruleModule = rules.get(rule);\n\n    let severity = Severity.Off;\n    let ruleConfig;\n\n    if (ruleModule.ruleType === RuleType.Array || ruleModule.ruleType === RuleType.Object) {\n      severity = typeof configObj[rule] === 'string' && configObj[rule] === 'off' ? configObj[rule] : configObj[rule][0];\n      ruleConfig = typeof configObj[rule] === 'string' ? {} : configObj[rule][1];\n    } else if (ruleModule.ruleType === RuleType.OptionalObject) {\n      if (typeof configObj[rule] === 'string') {\n        severity = configObj[rule];\n        ruleConfig = {};\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        severity = configObj[rule][0];\n        // eslint-disable-next-line prefer-destructuring\n        ruleConfig = configObj[rule][1];\n      }\n    } else {\n      severity = configObj[rule];\n    }\n\n    if (severity !== Severity.Off) {\n      const lintResult = ruleModule.lint(packageJsonData, severity, ruleConfig);\n\n      if (lintResult !== null) {\n        lintIssues.push(lintResult);\n      }\n    }\n  }\n\n  return lintIssues;\n};\n\n/**\n * Processes package.json object\n *\n * @param cwd The current working directory.\n * @param packageJsonObj   An object representation of a package.json file.\n * @param config A config object.\n * @param fileName An optional string representing the package.json file.\n * @param rules An instance of `Rules`.\n * @returns A {@link PackageJsonFileLintingResult} object with the result of linting a package.json file.\n * @internal\n */\nconst processPackageJsonObject = (\n  cwd: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  packageJsonObj: PackageJson | any,\n  // TODO: Type\n  config,\n  fileName: string,\n  rules: Rules\n): PackageJsonFileLintingResult => {\n  const lintIssues = lint(packageJsonObj, config, rules);\n  const counts = aggregateCountsPerFile(lintIssues);\n  const result = createResultObject({\n    cwd,\n    fileName,\n    ignored: false,\n    issues: lintIssues,\n    errorCount: counts.errorCount,\n    warningCount: counts.warningCount,\n  });\n\n  return result;\n};\n\n/**\n * Processes a package.json file.\n *\n * @param cwd The current working directory.\n * @param fileName The filename of the file being linted.\n * @param config A config object.\n * @param rules An instance of `Rules`.\n * @returns A {@link PackageJsonFileLintingResult} object with the result of linting a package.json file.\n * @internal\n */\n// TODO: Type\nconst processPackageJsonFile = (cwd: string, fileName: string, config, rules: Rules): PackageJsonFileLintingResult => {\n  const packageJsonObj = parseJsonFile(path.resolve(fileName));\n\n  return processPackageJsonObject(cwd, packageJsonObj, config, fileName, rules);\n};\n\nexport interface LinterResult {\n  results: LintIssue[];\n  ignoreCount: number;\n  /**\n   * Number of errors for the package.json file.\n   */\n  errorCount: number;\n  /**\n   * Number of warnings for the package.json file.\n   */\n  warningCount: number;\n}\n\nexport interface ExecuteOnPackageJsonObjectOptions {\n  /**\n   * The current working directory.\n   */\n  cwd: string;\n  /**\n   *  An object representation of a package.json file.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  packageJsonObject: PackageJson | any;\n  /**\n   * An optional string representing the texts filename.\n   */\n  filename?: string;\n  /**\n   * An instance of the `ignore` module.\n   */\n  ignorer: Ignore;\n  /**\n   * An instance of {@Config}.\n   */\n  configHelper: Config;\n  /**\n   * An instance of {@link Rules}\n   */\n  rules: Rules;\n}\n\nexport interface OverallLintingResult extends OverallAggregatedResultCounts {\n  results: PackageJsonFileLintingResult[];\n}\n\n/**\n * Executes linter on package.json object\n *\n * @param options A {@link ExecuteOnPackageJsonObjectOptions} object\n * @returns The results {@link OverallLintingResult} from linting a collection of package.json files.\n */\nexport const executeOnPackageJsonObject = (options: ExecuteOnPackageJsonObjectOptions): OverallLintingResult => {\n  const {cwd, packageJsonObject, filename, ignorer, configHelper, rules} = options;\n\n  debug('executing on package.json object');\n  const results = [];\n\n  const filenameDefaulted = filename || '';\n  const resolvedFilename = path.isAbsolute(filenameDefaulted) ? filenameDefaulted : path.resolve(cwd, filenameDefaulted);\n  const relativeFilePath = path.relative(cwd, resolvedFilename);\n\n  if (ignorer.ignores(relativeFilePath)) {\n    debug(`Ignored: ${relativeFilePath}`);\n\n    const result = createResultObject({\n      cwd,\n      fileName: resolvedFilename,\n      ignored: true,\n      issues: [],\n      errorCount: 0,\n      warningCount: 0,\n    });\n\n    results.push(result);\n  } else {\n    debug(`Getting config for ${resolvedFilename}`);\n    const config = configHelper.getConfigForFile(resolvedFilename);\n\n    debug(`Config fetched for ${resolvedFilename}`);\n    const result = processPackageJsonObject(cwd, packageJsonObject, config, resolvedFilename, rules);\n\n    results.push(result);\n  }\n\n  debug('Aggregating overall counts');\n  const stats = aggregateOverallCounts(results);\n\n  debug('stats');\n  debug(stats);\n\n  return {\n    results,\n    ignoreCount: stats.ignoreCount,\n    errorCount: stats.errorCount,\n    warningCount: stats.warningCount,\n  };\n};\n\nexport interface ExecuteOnPackageJsonFilesOptions {\n  /**\n   * The current working directory.\n   */\n  cwd: string;\n  /**\n   * An array of files and directory names.\n   */\n  fileList: string[];\n  /**\n   * An instance of the `ignore` module.\n   */\n  ignorer: Ignore;\n  /**\n   * An instance of {@Config}.\n   */\n  configHelper: Config;\n  /**\n   * An instance of {@link Rules}\n   */\n  rules: Rules;\n}\n\n/**\n * Executes the current configuration on an array of file and directory names.\n * @param options A {@link ExecuteOnPackageJsonFilesOptions} object\n * @returns The results {@link OverallLintingResult} from linting a collection of package.json files.\n */\nexport const executeOnPackageJsonFiles = (options: ExecuteOnPackageJsonFilesOptions): OverallLintingResult => {\n  const {cwd, fileList, ignorer, configHelper, rules} = options;\n\n  debug('executing on package.json files');\n  const results = fileList.map((filePath) => {\n    const relativeFilePath = path.relative(cwd, filePath);\n\n    if (ignorer.ignores(relativeFilePath)) {\n      debug(`Ignored: ${relativeFilePath}`);\n\n      return createResultObject({\n        cwd,\n        fileName: filePath,\n        ignored: true,\n        issues: [],\n        errorCount: 0,\n        warningCount: 0,\n      });\n    }\n\n    debug(`Getting config for ${filePath}`);\n    const config = configHelper.getConfigForFile(filePath);\n\n    debug(`Config fetched for ${filePath}`);\n\n    return processPackageJsonFile(cwd, filePath, config, rules);\n  });\n\n  debug('Aggregating overall counts');\n  const stats = aggregateOverallCounts(results);\n\n  debug('stats');\n  debug(stats);\n\n  return {\n    results,\n    ignoreCount: stats.ignoreCount,\n    errorCount: stats.errorCount,\n    warningCount: stats.warningCount,\n  };\n};\n", "import {LintIssue} from '../lint-issue';\nimport {Severity} from '../types/severity';\nimport {PackageJsonFileLintingResult} from '../types/package-json-linting-result';\n\n/**\n * A result count object for a files.\n * @typedef {Object} FileResultCounts\n * @property {number} errorCount    Number of errors for a file result.\n * @property {number} warningCount  Number of warnings for a file result.\n */\n\nexport interface PackageJsonFileAggregatedResultCounts {\n  errorCount: number;\n  warningCount: number;\n}\n\n/**\n * Aggregates the count of errors and warning for a package.json file.\n *\n * @param issues Array of {@link LintIssue} objects from a package.json file.\n * @returns Counts object {@link PackageJsonFileAggregatedResultCounts}.\n */\nexport const aggregateCountsPerFile = (issues: LintIssue[]): PackageJsonFileAggregatedResultCounts => {\n  const incrementOne = 1;\n\n  // eslint-disable-next-line unicorn/no-array-reduce\n  return issues.reduce(\n    (counts, issue) => {\n      const isErrorSeverity = issue.severity === Severity.Error;\n      const newErrorCount = isErrorSeverity ? counts.errorCount + incrementOne : counts.errorCount;\n      const newWarningCount = isErrorSeverity ? counts.warningCount : counts.warningCount + incrementOne;\n\n      return {\n        errorCount: newErrorCount,\n        warningCount: newWarningCount,\n      };\n    },\n    {\n      errorCount: 0,\n      warningCount: 0,\n    }\n  );\n};\n\nexport interface OverallAggregatedResultCounts {\n  /**\n   * Total number of ignored files.\n   */\n  ignoreCount: number;\n  /**\n   * Total number of errors.\n   */\n  errorCount: number;\n  /**\n   * Total number of warnings.\n   */\n  warningCount: number;\n}\n\n/**\n * Aggregates the count of errors and warnings for all package.json files.\n *\n * @param results Array of {@link PackageJsonFileLintingResult} objects from all package.json files.\n * @returns Counts object {@link OverallAggregatedResultCounts}\n */\nexport const aggregateOverallCounts = (results: PackageJsonFileLintingResult[]): OverallAggregatedResultCounts =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  results.reduce(\n    (counts, result) => ({\n      ignoreCount: result.ignored ? counts.ignoreCount + 1 : counts.ignoreCount,\n      errorCount: counts.errorCount + result.errorCount,\n      warningCount: counts.warningCount + result.warningCount,\n    }),\n    {\n      ignoreCount: 0,\n      errorCount: 0,\n      warningCount: 0,\n    }\n  );\n", "import path from 'path';\nimport globby from 'globby';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:getFileList');\n\n/**\n * Generates a list of files to lint based on a list of provided patterns\n *\n * @param {Array<string>} patterns An array of patterns\n * @param {string}        cwd      The current working directory.\n * @returns {Array<string>} An array a files to lint.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const getFileList = (patterns, cwd) => {\n  debug('patterns');\n  debug(patterns);\n\n  // step 1 - filter out empty entries\n  const filteredPatterns = patterns.filter((pattern) => pattern.length);\n\n  debug('filteredPatterns');\n  debug(filteredPatterns);\n\n  // step 2 - convert directories to globs\n  const globPatterns = filteredPatterns.map((pattern) =>\n    pattern.endsWith(`/package.json`) ? pattern : `${pattern}/**/package.json`\n  );\n\n  globPatterns.push('!**/node_modules/**');\n\n  debug('globPatterns');\n  debug(globPatterns);\n\n  const files = [];\n  const addedFiles = new Set();\n\n  const globFiles = globby.sync(globPatterns, {\n    cwd,\n    gitignore: true,\n  });\n\n  debug('globFiles');\n  debug(globFiles);\n\n  globFiles.forEach((globFile) => {\n    const filePath = path.resolve(cwd, globFile);\n\n    if (addedFiles.has(filePath)) {\n      return;\n    }\n\n    addedFiles.add(filePath);\n    files.push(filePath);\n  });\n\n  debug('Final file list from `getFileList`');\n  debug(files);\n\n  return files;\n};\n", "import fs from 'fs';\nimport path from 'path';\nimport ignore, {Ignore} from 'ignore';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst debug = require('debug')('npm-package-json-lint:getIgnorer');\n\nconst DEFAULT_IGNORE_FILENAME = '.npmpackagejsonlintignore';\nconst FILE_NOT_FOUND_ERROR_CODE = 'ENOENT';\n\n/**\n * Generates ignorer based on ignore file content.\n *\n * @param cwd Current work directory.\n * @param ignorePath Ignore path.\n * @returns An instance of an Ignorer\n */\nexport const getIgnorer = (cwd: string, ignorePath: string): Ignore => {\n  const ignoreFilePath = ignorePath || DEFAULT_IGNORE_FILENAME;\n\n  debug(`ignoreFilePath: ${ignoreFilePath}`);\n  const absoluteIgnoreFilePath = path.isAbsolute(ignoreFilePath) ? ignoreFilePath : path.resolve(cwd, ignoreFilePath);\n\n  debug(`absoluteIgnoreFilePath: ${absoluteIgnoreFilePath}`);\n  let ignoreText = '';\n\n  try {\n    ignoreText = fs.readFileSync(absoluteIgnoreFilePath, 'utf8');\n  } catch (readError) {\n    if (readError.code !== FILE_NOT_FOUND_ERROR_CODE) {\n      throw readError;\n    }\n  }\n\n  debug('Ignore text added');\n\n  return ignore().add(ignoreText);\n};\n", "import chalk from 'chalk';\nimport plur from 'plur';\nimport {LintIssue} from './lint-issue';\n\nconst zeroIssues = 0;\nconst oneFile = 1;\n\n/**\n * Prints issues to console\n *\n * @param issues An array of LintIssues\n * @internal\n */\nconst printResultSetIssues = (issues: LintIssue[]): void => {\n  issues.forEach((issue) => {\n    console.log(issue.toString());\n  });\n};\n\n/**\n * Print results for an individual package.json file linting\n *\n * @param resultSet Result object from a given file's lint result\n * @param quiet True suppress warnings, false show warnings\n * @internal\n */\nconst printIndividualResultSet = (resultSet, quiet: boolean): void => {\n  const {filePath, issues, ignored, errorCount, warningCount} = resultSet;\n\n  if (ignored) {\n    console.log('');\n\n    console.log(`${chalk.yellow.underline(filePath)} - ignored`);\n  } else if (errorCount > zeroIssues || (!quiet && warningCount > zeroIssues)) {\n    console.log('');\n\n    console.log(chalk.underline(filePath));\n\n    printResultSetIssues(issues);\n\n    const errorCountMessage = `${errorCount} ${plur('error', errorCount)}`;\n    const warningCountMessage = `${warningCount} ${plur('warning', warningCount)}`;\n\n    console.log(chalk.red.bold(errorCountMessage));\n\n    if (!quiet) {\n      console.log(chalk.yellow.bold(warningCountMessage));\n    }\n  }\n};\n\n/**\n * Prints the overall total counts section\n *\n * @param linterOutput Full results from linting. Includes an array of results and overall counts\n * @param quiet True suppress warnings, false show warnings\n * @internal\n */\nconst printTotals = (linterOutput, quiet: boolean): void => {\n  const {errorCount, warningCount, ignoreCount} = linterOutput;\n\n  if (errorCount > zeroIssues || warningCount > zeroIssues) {\n    const errorCountMessage = `${errorCount} ${plur('error', errorCount)}`;\n    const warningCountMessage = `${warningCount} ${plur('warning', warningCount)}`;\n    const ignoreCountMessage = `${ignoreCount} ${plur('file', ignoreCount)} ignored`;\n\n    console.log('');\n    console.log(chalk.underline('Totals'));\n    console.log(chalk.red.bold(errorCountMessage));\n\n    if (!quiet) {\n      console.log(chalk.yellow.bold(warningCountMessage));\n      console.log(chalk.yellow.bold(ignoreCountMessage));\n    }\n  }\n};\n\n/**\n * Print results to console\n *\n * @param linterOutput An array of LintIssues\n * @param quiet Flag indicating whether to print warnings.\n * @internal\n */\nexport const write = (linterOutput, quiet: boolean): void => {\n  linterOutput.results.forEach((result) => {\n    printIndividualResultSet(result, quiet);\n  });\n\n  if (linterOutput.results.length > oneFile) {\n    printTotals(linterOutput, quiet);\n  }\n};\n"],
  "mappings": "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",
  "names": ["import_chalk", "import_meow", "import_is_plain_obj", "import_slash", "import_cosmiconfig", "import_ajv", "import_ajv_errors", "ajv", "Ajv", "ajvErrors", "formatSchemaErrors", "errors", "error", "standardRuleSchema", "arrayRuleSchema", "minItems", "objectRuleSchema", "optionalObjExceptionsSchema", "isStandardRuleSchemaValid", "ruleConfig", "validate", "ajv", "standardRuleSchema", "formatSchemaErrors", "isArrayRuleSchemaValid", "minItems", "arrayRuleSchema", "isObjectRuleSchemaValid", "objectRuleSchema", "isOptionalObjExceptSchemaValid", "optionalObjExceptionsSchema", "isObjectRuleConfigValid", "ruleConfig", "isObjectRuleSchemaValid", "isOptionalObjRuleConfigValid", "isStandardRuleSchemaValid", "isOptionalObjExceptSchemaValid", "isArrayRuleConfigValid", "minItems", "isArrayRuleSchemaValid", "isStandardRuleConfigValid", "validateRule", "ruleModule", "ruleName", "userConfig", "source", "error_", "modifiedErrorMessage", "validateRules", "rulesConfig", "rules", "import_path", "import_path", "import_fs", "import_strip_json_comments", "requireFile", "fileName", "readFile", "fs", "handleError", "err", "sourceSymbol", "parseJsonFile", "json", "fileContents", "stripComments", "error", "parseJavaScriptFile", "obj", "debug", "applyExtends", "config", "parentName", "originalFilePath", "configExtends", "previousConfig", "moduleName", "extendsConfig", "loadFromModule", "mergedConfig", "rules", "extendsConfigPlugins", "previousConfigPlugins", "plugins", "uniquePlugins", "extendsConfigOverrides", "previousConfigOverrides", "overrides", "error", "adjustedModuleName", "path", "loadConfigFile", "resolvedModule", "filePath", "parseJavaScriptFile", "parseJsonFile", "applyExtendsIfSpecified", "npmPackageJsonLintConfig", "filepath", "import_path", "import_globby", "debug", "applyOverrides", "cwd", "filePath", "rules", "overrides", "finalRules", "override", "transformedPatterns", "pattern", "globFiles", "globby", "globFile", "globbedFilePath", "path", "debug", "transform", "cwd", "configBaseDirectory", "filePathBeingLinted", "cosmiconfigResult", "config", "filepath", "configDir", "path", "npmPackageJsonLintConfig", "configAfterExtends", "applyExtendsIfSpecified", "applyOverrides", "debug", "noRules", "Config", "cwd", "config", "configFile", "configBaseDirectory", "rules", "applyExtendsIfSpecified", "filePath", "filePathToSearch", "transform", "configBeforeOverrides", "applyOverrides", "validateRules", "import_chalk", "import_fs", "import_path", "Rules", "rulesDirectory", "path", "filePath", "ruleId", "filePathToRuleModule", "error", "errorMsg", "chalk", "import_path", "aggregateCountsPerFile", "issues", "counts", "issue", "isErrorSeverity", "newErrorCount", "newWarningCount", "aggregateOverallCounts", "results", "result", "debug", "createResultObject", "options", "cwd", "fileName", "ignored", "issues", "errorCount", "warningCount", "path", "lint", "packageJsonData", "configObj", "rules", "lintIssues", "rule", "ruleModule", "severity", "ruleConfig", "lintResult", "processPackageJsonObject", "packageJsonObj", "config", "counts", "aggregateCountsPerFile", "processPackageJsonFile", "parseJsonFile", "executeOnPackageJsonObject", "packageJsonObject", "filename", "ignorer", "configHelper", "results", "filenameDefaulted", "resolvedFilename", "relativeFilePath", "result", "stats", "aggregateOverallCounts", "executeOnPackageJsonFiles", "fileList", "filePath", "import_path", "import_globby", "debug", "getFileList", "patterns", "cwd", "filteredPatterns", "pattern", "globPatterns", "files", "addedFiles", "globFiles", "globby", "globFile", "filePath", "path", "import_fs", "import_path", "import_ignore", "debug", "DEFAULT_IGNORE_FILENAME", "FILE_NOT_FOUND_ERROR_CODE", "getIgnorer", "cwd", "ignorePath", "ignoreFilePath", "absoluteIgnoreFilePath", "path", "ignoreText", "fs", "readError", "ignore", "debug", "pkg", "noIssues", "isIssueAnError", "issue", "isPackageJsonObjectValid", "packageJsonObject", "isPlainObj", "areRequiredOptionsValid", "patterns", "getErrorResults", "results", "filtered", "result", "filteredIssues", "filteredResult", "NpmPackageJsonLint", "options", "cwd", "packageJsonFilePath", "config", "configFile", "configBaseDirectory", "quiet", "ignorePath", "fix", "slash", "Rules", "Config", "ignorer", "getIgnorer", "linterOutput", "fileList", "getFileList", "executeOnPackageJsonFiles", "executeOnPackageJsonObject", "import_chalk", "import_plur", "zeroIssues", "oneFile", "printResultSetIssues", "issues", "issue", "printIndividualResultSet", "resultSet", "quiet", "filePath", "ignored", "errorCount", "warningCount", "chalk", "errorCountMessage", "plur", "warningCountMessage", "printTotals", "linterOutput", "ignoreCount", "ignoreCountMessage", "write", "result", "debug", "exitCodes", "cli", "meow", "input", "flags", "noPatternsProvided", "patterns", "chalk", "exitCode", "noIssues", "linterOutput", "NpmPackageJsonLint", "write", "error"]
}
