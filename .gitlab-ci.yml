stages:
  - test
  - build

# Select what we should cache
cache:
  paths:
    - vendor/

services:
  - mysql

# before_script will run on ALL PHP versions listed in test
before_script:
  # Install git, the php image doesn't have it installed
  - apt-get update -yqq
  - apt-get install git -yqq
  # required for "PHP 7.4+
  - apt-get install libonig-dev -yqq

  # install the required packages for the running CI tests
  - apt-get -yqqf install wget zip unzip subversion default-mysql-client libmcrypt-dev default-libmysqlclient-dev default-mysql-server --fix-missing

  # Install mysql driver
  - docker-php-ext-install mysqli pdo_mysql mbstring

  # Install Xdebug. See https://xdebug.org/docs/compat for which version to install
  - pecl install xdebug-3.1.6
  # XDEBUG mode has to be set to coverage
  - echo xdebug.mode=coverage > /usr/local/etc/php/conf.d/xdebug.ini

  # PHP extensions
  - docker-php-ext-enable mysqli pdo_mysql mbstring xdebug

  # Install composer
  - curl -sS https://getcomposer.org/installer | php

  # Install project dependencies
  - php composer.phar install --ignore-platform-reqs
  - php composer.phar update
  # Set up WordPress test environment
  - bash bin/install-wp-tests.sh wordpress_test root mysql mysql $WP_VERSION

  # Install WP-CLI and configure a WordPress installation
  - curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
  - chmod +x wp-cli.phar
  - mv wp-cli.phar /usr/local/bin/wp
  - wp core download --allow-root
  - wp core config --dbhost=mysql --dbname=$DB_NAME --dbuser=$DB_USER --dbpass=$DB_PASS --allow-root
  - wp config list --allow-root
  - wp core install --url=http://localhost --title=Example --admin_user=$ADMIN_USER --admin_password=$ADMIN_PASSWORD --admin_email=$ADMIN_EMAIL --allow-root

  # Zip current branch to allow it to be installed using wp-cli
  - zip -r really-simple-ssl.zip .
  # The goal here is to test an installation of a specific branch (which is contained in a .zip file), as well as an update from the live version of the plugin to the branch to test.

  # Install the plugin from the .zip file of the current branch. This is the branch we're testing.
  - wp plugin install really-simple-ssl.zip --allow-root --force
  # Activate the plugin that we just installed.
  - wp plugin activate really-simple-ssl --allow-root
  # Deactivate the plugin. This might be done to simulate a user deactivating the plugin, or to ensure a clean state before testing other functionality.
  - wp plugin deactivate really-simple-ssl --allow-root
  # Uninstall the plugin. This removes the plugin's files and data from the WordPress site.
  - wp plugin uninstall really-simple-ssl --allow-root
  # Now we're going to test an upgrade. Since Really Simple SSL is a free plugin, we can install the current live version directly from the WordPress plugin repository.

  # Install the live version of the plugin from the WordPress plugin repository.
  - wp plugin install really-simple-ssl --allow-root
  # Activate the live version of the plugin.
  - wp plugin activate really-simple-ssl --allow-root
  # Get the version of the live plugin and store it in a variable named OLD_VERSION.
  - export OLD_VERSION=$(wp plugin get really-simple-ssl --field=version --allow-root)
  # Now install the version of the plugin from the .zip file again. This simulates updating the plugin from the live version to the new version contained in the .zip file.
  - wp plugin install really-simple-ssl.zip --allow-root --force
  # Get the version of the newly updated plugin and store it in a variable named NEW_VERSION.
  - export NEW_VERSION=$(wp plugin get really-simple-ssl --field=version --allow-root)
  # Deactivate the updated plugin.
  - wp plugin deactivate really-simple-ssl --allow-root
  # Uninstall the updated plugin.
  - wp plugin uninstall really-simple-ssl --allow-root

#  - if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then echo "Update successful"; else echo "Update failed"; fi

variables:
  # Configure mysql service (https://hub.docker.com/_/mysql/)
  MYSQL_DATABASE: wordpress_tests
  MYSQL_ROOT_PASSWORD: mysql
  WP_VERSION: latest
  WP_MULTISITE: "0"

# We test PHP 7.4
test:php7.4:
  image: php:7.4
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clove --colors=never --debug
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'

# We test PHP7.4 with multisite
test:php7.4:multisite:
  variables:
    WP_MULTISITE: "1"
  image: php:7.4
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clove --colors=never
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'

# We test PHP8.0
test:php8.0:
  image: php:8.0
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover --colors=never
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'

# We test PHP8 with multisite
test:php8.0:multisite:
  variables:
    WP_MULTISITE: "1"
  image: php:8.0
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clove --colors=never
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'

# We test PHP8.1
test:php8.1:
  image: php:8.1
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover --colors=never
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'

# We test PHP8.1 with multisite
test:php8.1:multisite:
  variables:
    WP_MULTISITE: "1"
  image: php:8.1
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clove --colors=never
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'